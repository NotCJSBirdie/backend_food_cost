# serverless.yml
org: carlserquina
app: food-cost-app
service: food-cost-api

frameworkVersion: ~4.17.1

params:
  default:
    domain: ${sls:stage}.foodcostapi.com
  prod:
    domain: foodcostapi.com
  dev:
    domain: dev.foodcostapi.com

provider:
  name: aws
  runtime: nodejs22.x
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: food-cost-deployment-bucket-795796019955
    blockPublicAccess: true
  environment:
    DB_USERNAME: ${env:DB_USER, 'foodcostadmin'}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_NAME: ${env:DB_NAME, 'foodcost'}
    DB_HOST: ${env:DB_HOST}
    NODE_ENV: ${opt:stage, 'production'}
  tags:
    environment: ${sls:stage}
  httpApi:
    timeout: 30 # Match Lambda timeout

functions:
  FoodCostLambda: # Use PascalCase to match reference
    handler: lambda.handler
    memorySize: 512
    timeout: 30
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true

plugins:
  - serverless-appsync-plugin

appSync:
  name: FoodCostApi
  authentication:
    type: API_KEY
  dataSources:
    FoodCostLambdaDataSource:
      type: AWS_LAMBDA
      config:
        functionName: FoodCostLambda # Reference the function name directly
  resolvers:
    Query.dashboardStats:
      kind: UNIT
      dataSource: FoodCostLambdaDataSource
    Query.ingredients:
      kind: UNIT
      dataSource: FoodCostLambdaDataSource
    Query.recipes:
      kind: UNIT
      dataSource: FoodCostLambdaDataSource
    Query.sales:
      kind: UNIT
      dataSource: FoodCostLambdaDataSource
    Mutation.addIngredient:
      kind: UNIT
      dataSource: FoodCostLambdaDataSource
    Mutation.createRecipe:
      kind: UNIT
      dataSource: FoodCostLambdaDataSource
    Mutation.recordSale:
      kind: UNIT
      dataSource: FoodCostLambdaDataSource

package:
  individually: true
  include:
    - lambda.js
    - resolvers.js
    - data-source.js
    - src/schema.graphql
    - node_modules/**
